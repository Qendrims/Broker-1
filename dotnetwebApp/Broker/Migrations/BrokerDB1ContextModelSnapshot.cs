// <auto-generated />
using System;
using Broker;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Broker.Migrations
{
    [DbContext(typeof(BrokerDB1Context))]
    partial class BrokerDB1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Broker.Models.CounterOffer", b =>
                {
                    b.Property<int>("CounterOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("CounterOfferPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CounterOfferId");

                    b.ToTable("counteroffer");
                });

            modelBuilder.Entity("Broker.Models.DergonCounterOffer", b =>
                {
                    b.Property<int>("CounterOfferId")
                        .HasColumnType("int");

                    b.Property<int>("postid")
                        .HasColumnType("int");

                    b.HasIndex("CounterOfferId");

                    b.HasIndex("postid");

                    b.ToTable("dergonCounterOffers");
                });

            modelBuilder.Entity("Broker.Models.Feedback", b =>
                {
                    b.Property<string>("PermbajtjaFeedBackut")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PermbajtjaFeedBackut", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback");
                });

            modelBuilder.Entity("Broker.Models.Images", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("image");
                });

            modelBuilder.Entity("Broker.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GivenBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TakenBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("job");
                });

            modelBuilder.Entity("Broker.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AgentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longtitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Qyteti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rruga")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isArchived")
                        .HasColumnType("bit");

                    b.HasKey("PostId");

                    b.HasIndex("AgentID");

                    b.ToTable("post");
                });

            modelBuilder.Entity("Broker.Models.PostCategory", b =>
                {
                    b.Property<int>("PostCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostCategoryId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("postcategory");
                });

            modelBuilder.Entity("Broker.Models.PostCounterOffer", b =>
                {
                    b.Property<int>("CounterOfferId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CounterOfferId", "PostId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("postcounteroffer");
                });

            modelBuilder.Entity("Broker.Models.Tags", b =>
                {
                    b.Property<int>("TagName")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("TagName", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Broker.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Ditelindja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Emri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mbiemri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Qyteti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rruga")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("user");

                    b.HasDiscriminator<string>("type").HasValue("User");
                });

            modelBuilder.Entity("CounterOfferPost", b =>
                {
                    b.Property<int>("CounterOffersCounterOfferId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("CounterOffersCounterOfferId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("CounterOfferPost");
                });

            modelBuilder.Entity("Broker.Models.SimpleUser", b =>
                {
                    b.HasBaseType("Broker.Models.User");

                    b.HasDiscriminator().HasValue("SimpleUser");
                });

            modelBuilder.Entity("Broker.Models.Agent", b =>
                {
                    b.HasBaseType("Broker.Models.SimpleUser");

                    b.Property<long>("AccountNr")
                        .HasColumnType("bigint");

                    b.Property<double>("Paga")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Agent");
                });

            modelBuilder.Entity("Broker.Models.DergonCounterOffer", b =>
                {
                    b.HasOne("Broker.Models.CounterOffer", "counteroffer")
                        .WithMany()
                        .HasForeignKey("CounterOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Broker.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("postid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("counteroffer");

                    b.Navigation("post");
                });

            modelBuilder.Entity("Broker.Models.Feedback", b =>
                {
                    b.HasOne("Broker.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Broker.Models.Images", b =>
                {
                    b.HasOne("Broker.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");
                });

            modelBuilder.Entity("Broker.Models.Job", b =>
                {
                    b.HasOne("Broker.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Broker.Models.Post", b =>
                {
                    b.HasOne("Broker.Models.Agent", "agent")
                        .WithMany()
                        .HasForeignKey("AgentID");

                    b.Navigation("agent");
                });

            modelBuilder.Entity("Broker.Models.PostCategory", b =>
                {
                    b.HasOne("Broker.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");
                });

            modelBuilder.Entity("Broker.Models.PostCounterOffer", b =>
                {
                    b.HasOne("Broker.Models.CounterOffer", "counteroffer")
                        .WithMany()
                        .HasForeignKey("CounterOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Broker.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Broker.Models.Agent", "agent")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("agent");

                    b.Navigation("counteroffer");

                    b.Navigation("post");
                });

            modelBuilder.Entity("Broker.Models.Tags", b =>
                {
                    b.HasOne("Broker.Models.Post", "post")
                        .WithMany("tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");
                });

            modelBuilder.Entity("CounterOfferPost", b =>
                {
                    b.HasOne("Broker.Models.CounterOffer", null)
                        .WithMany()
                        .HasForeignKey("CounterOffersCounterOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Broker.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Broker.Models.Post", b =>
                {
                    b.Navigation("tags");
                });
#pragma warning restore 612, 618
        }
    }
}
